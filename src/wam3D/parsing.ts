import {ComponentFactory as Factory} from "./factory/factory";
import {HGroup} from "./factory/components/hgroup";
import {VGroup} from "./factory/components/vgroup";

// Used json must be getJSON(), remove number in function name to use it
function getJSON1() {
    return '{"name": "greyhole","filename": "greyhole.dsp","version": "2.69.0","compile_options": "-lang wasm-ib -ct 1 -cn greyhole -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/F1B4B972C94D2E6E2ED6DC1BCE3506D12A8B7D4C/web/wap"],"size": 2640980,"inputs": 2,"outputs": 2,"meta": [ { "author": "GRAME" },{ "basics_lib_name": "Faust Basic Element Library" },{ "basics_lib_tabulateNd": "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>" },{ "basics_lib_version": "1.11.1" },{ "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "delays_lib_fdelay1a_author": "Julius O. Smith III" },{ "delays_lib_fdelay4_author": "Julius O. Smith III" },{ "delays_lib_fdelayltv_author": "Julius O. Smith III" },{ "delays_lib_name": "Faust Delay Library" },{ "delays_lib_version": "1.1.0" },{ "demos_lib_greyhole_demo_author": "Till Bovermann" },{ "demos_lib_greyhole_demo_license": "GPL2+" },{ "demos_lib_name": "Faust Demos Library" },{ "demos_lib_version": "1.1.0" },{ "description": "Greyhole demo application." },{ "filename": "greyhole.dsp" },{ "filters_lib_lowpass0_highpass1": "MIT-style STK-4.3 license" },{ "filters_lib_name": "Faust Filters Library" },{ "filters_lib_nlf2_author": "Julius O. Smith III" },{ "filters_lib_nlf2_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_nlf2_license": "MIT-style STK-4.3 license" },{ "filters_lib_tf1_author": "Julius O. Smith III" },{ "filters_lib_tf1_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_tf1_license": "MIT-style STK-4.3 license" },{ "filters_lib_version": "1.3.0" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/demos.lib" },{ "library_path2": "/libraries/reverbs.lib" },{ "library_path3": "/libraries/signals.lib" },{ "library_path4": "/libraries/maths.lib" },{ "library_path5": "/libraries/delays.lib" },{ "library_path6": "/libraries/filters.lib" },{ "library_path7": "/libraries/platform.lib" },{ "library_path8": "/libraries/oscillators.lib" },{ "library_path9": "/libraries/basics.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.6.0" },{ "name": "greyhole" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "reverbs_lib_greyhole_author": "Julian Parker, bug fixes and minor interface changes by Till Bovermann" },{ "reverbs_lib_greyhole_license": "GPL2+" },{ "reverbs_lib_name": "Faust Reverb Library" },{ "reverbs_lib_version": "1.2.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "1.3.0" },{ "version": "2.68.1" }],"ui": [ {"type": "vgroup","label": "Greyhole","meta": [{ "0": "" }],"items": [ {"type": "hgroup","label": "Mix","meta": [{ "0": "" }],"items": [ {"type": "hslider","label": "delayTime","shortname": "delayTime","address": "/Greyhole/Mix/delayTime","index": 529588,"meta": [{ "01": "" },{ "style": "knob" }],"init": 0.2,"min": 0.001,"max": 1.45,"step": 0.0001},{"type": "hslider","label": "damping","shortname": "damping","address": "/Greyhole/Mix/damping","index": 5216,"meta": [{ "02": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 0.99,"step": 0.001},{"type": "hslider","label": "size","shortname": "size","address": "/Greyhole/Mix/size","index": 1053924,"meta": [{ "03": "" },{ "style": "knob" }],"init": 1,"min": 0.5,"max": 3,"step": 0.0001},{"type": "hslider","label": "diffusion","shortname": "diffusion","address": "/Greyhole/Mix/diffusion","index": 529624,"meta": [{ "04": "" },{ "style": "knob" }],"init": 0.5,"min": 0,"max": 0.99,"step": 0.0001},{"type": "hslider","label": "feedback","shortname": "feedback","address": "/Greyhole/Mix/feedback","index": 5228,"meta": [{ "05": "" },{ "style": "knob" }],"init": 0.9,"min": 0,"max": 1,"step": 0.01}]},{"type": "hgroup","label": "Mod","meta": [{ "1": "" }],"items": [ {"type": "hslider","label": "modDepth","shortname": "modDepth","address": "/Greyhole/Mod/modDepth","index": 5284,"meta": [{ "06": "" },{ "style": "knob" }],"init": 0.1,"min": 0,"max": 1,"step": 0.001},{"type": "hslider","label": "modFreq","shortname": "modFreq","address": "/Greyhole/Mod/modFreq","index": 5244,"meta": [{ "07": "" },{ "style": "knob" }],"init": 2,"min": 0,"max": 10,"step": 0.01}]}]}]}';
}
function getJSON2() {
    return '{"name": "autopan","filename": "autopan.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn autopan -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/928627E75E1DF397B4A0A135E8E5AC25920B8466/web/wap"],"size": 524384,"inputs": 2,"outputs": 2,"meta": [ { "basics_lib_name": "Faust Basic Element Library" },{ "basics_lib_tabulateNd": "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>" },{ "basics_lib_version": "1.11.1" },{ "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "autopan.dsp" },{ "interpolators_lib_interpolate_linear_author": "Stéphane Letz" },{ "interpolators_lib_interpolate_linear_licence": "MIT" },{ "interpolators_lib_name": "Faust Interpolator Library" },{ "interpolators_lib_remap_author": "David Braun" },{ "interpolators_lib_version": "1.3.0" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/signals.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "library_path4": "/libraries/oscillators.lib" },{ "library_path5": "/libraries/basics.lib" },{ "library_path6": "/libraries/interpolators.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "autopan" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "1.5.0" },{ "version": "2.69.3" }],"ui": [ {"type": "hgroup","label": "Auto Pan","items": [ {"type": "hslider","label": "Amount","shortname": "Amount","address": "/Auto_Pan/Amount","index": 524336,"meta": [{ "0": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.001},{"type": "hslider","label": "Rate","shortname": "Rate","address": "/Auto_Pan/Rate","index": 524296,"meta": [{ "1": "" },{ "scale": "log" },{ "style": "knob" },{ "unit": "Hz" }],"init": 1,"min": 0.05,"max": 90,"step": 0.001},{"type": "hslider","label": "Phase","shortname": "Phase","address": "/Auto_Pan/Phase","index": 524340,"meta": [{ "2": "" },{ "style": "knob" },{ "unit": "°" }],"init": 180,"min": 0,"max": 360,"step": 15},{"type": "hslider","label": "Shape","shortname": "Shape","address": "/Auto_Pan/Shape","index": 524324,"meta": [{ "3": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.001}]}]}';
}
function getJSON3() {
    return '{"name": "compressor","filename": "compressor.dsp","version": "2.69.0","compile_options": "-lang wasm-ib -ct 1 -cn compressor -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/825D9BAFDF18F96BCFFDD0C2FD4E59C0F6F2FB29/web/wap"],"size": 68,"inputs": 2,"outputs": 2,"meta": [ { "analyzers_lib_amp_follower_ar_author": "Jonatan Liljedahl, revised by Romain Michon" },{ "analyzers_lib_name": "Faust Analyzer Library" },{ "analyzers_lib_version": "1.2.0" },{ "author": "JOS, revised by RM" },{ "basics_lib_bypass2_author": "Julius Smith" },{ "basics_lib_name": "Faust Basic Element Library" },{ "basics_lib_tabulateNd": "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>" },{ "basics_lib_version": "1.11.1" },{ "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "compressors_lib_compression_gain_mono_author": "Julius O. Smith III" },{ "compressors_lib_compression_gain_mono_copyright": "Copyright (C) 2014-2020 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "compressors_lib_compression_gain_mono_license": "MIT-style STK-4.3 license" },{ "compressors_lib_compressor_stereo_author": "Julius O. Smith III" },{ "compressors_lib_compressor_stereo_copyright": "Copyright (C) 2014-2020 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "compressors_lib_compressor_stereo_license": "MIT-style STK-4.3 license" },{ "compressors_lib_name": "Faust Compressor Effect Library" },{ "compressors_lib_version": "1.5.0" },{ "demos_lib_compressor_demo_author": "Julius O. Smith III" },{ "demos_lib_compressor_demo_licence": "MIT" },{ "demos_lib_name": "Faust Demos Library" },{ "demos_lib_version": "1.1.0" },{ "description": "Compressor demo application" },{ "filename": "compressor.dsp" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/demos.lib" },{ "library_path2": "/libraries/basics.lib" },{ "library_path3": "/libraries/compressors.lib" },{ "library_path4": "/libraries/maths.lib" },{ "library_path5": "/libraries/platform.lib" },{ "library_path6": "/libraries/analyzers.lib" },{ "library_path7": "/libraries/signals.lib" },{ "library_path8": "/libraries/routes.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.6.0" },{ "name": "compressor" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "routes_lib_name": "Faust Signal Routing Library" },{ "routes_lib_version": "1.2.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_onePoleSwitching_author": "Jonatan Liljedahl, revised by Dario Sanfilippo" },{ "signals_lib_onePoleSwitching_licence": "STK-4.3" },{ "signals_lib_version": "1.3.0" },{ "version": "2.68.1" }],"ui": [ {"type": "vgroup","label": "COMPRESSOR","meta": [{ "tooltip": "Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression" }],"items": [ {"type": "hgroup","label": "0x00","meta": [{ "0": "" }],"items": [ {"type": "checkbox","label": "Bypass","shortname": "Bypass","address": "/COMPRESSOR/0x00/Bypass","index": 0,"meta": [{ "0": "" },{ "tooltip": "When this is checked, the compressor         has no effect" }]},{"type": "hbargraph","label": "Compressor Gain","shortname": "Compressor_Gain","address": "/COMPRESSOR/0x00/Compressor_Gain","index": 64,"meta": [{ "1": "" },{ "tooltip": "Current gain of     the compressor in dB" },{ "unit": "dB" }],"min": -50,"max": 10}]},{"type": "hgroup","label": "0x00","meta": [{ "1": "" }],"items": [ {"type": "hgroup","label": "Compression Control","meta": [{ "3": "" }],"items": [ {"type": "hslider","label": "Ratio","shortname": "Ratio","address": "/COMPRESSOR/0x00/Compression_Control/Ratio","index": 32,"meta": [{ "0": "" },{ "style": "knob" },{ "tooltip": "A compression Ratio of N means that for each N dB increase in input     signal level above Threshold, the output level goes up 1 dB" }],"init": 5,"min": 1,"max": 20,"step": 0.1},{"type": "hslider","label": "Threshold","shortname": "Threshold","address": "/COMPRESSOR/0x00/Compression_Control/Threshold","index": 16,"meta": [{ "1": "" },{ "style": "knob" },{ "tooltip": "When the signal level exceeds the Threshold (in dB), its level     is compressed according to the Ratio" },{ "unit": "dB" }],"init": -30,"min": -100,"max": 10,"step": 0.1}]},{"type": "hgroup","label": "Compression Response","meta": [{ "4": "" }],"items": [ {"type": "hslider","label": "Attack","shortname": "Attack","address": "/COMPRESSOR/0x00/Compression_Response/Attack","index": 12,"meta": [{ "1": "" },{ "scale": "log" },{ "style": "knob" },{ "tooltip": "Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in\')" },{ "unit": "ms" }],"init": 50,"min": 1,"max": 1000,"step": 0.1},{"type": "hslider","label": "Release","shortname": "Release","address": "/COMPRESSOR/0x00/Compression_Response/Release","index": 20,"meta": [{ "2": "" },{ "scale": "log" },{ "style": "knob" },{ "tooltip": "Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     \'releasing\')" },{ "unit": "ms" }],"init": 500,"min": 1,"max": 1000,"step": 0.1}]}]},{"type": "hslider","label": "Makeup Gain","shortname": "Makeup_Gain","address": "/COMPRESSOR/Makeup_Gain","index": 44,"meta": [{ "5": "" },{ "tooltip": "The compressed-signal output level is increased by this amount     (in dB) to make up for the level lost due to compression" },{ "unit": "dB" }],"init": 40,"min": -96,"max": 96,"step": 0.1}]}]}';
}
function getJSON4() {
    return '{"name": "HPF","filename": "HPF.dsp","version": "2.69.3","compile_options": "-lang wasm-ib -ct 1 -cn HPF -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/46724080972E99FC261496F6212C5810A2869950/web/wap"],"size": 28,"inputs": 1,"outputs": 1,"meta": [ { "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "HPF.dsp" },{ "library_path0": "/libraries/maxmsp.lib" },{ "library_path1": "/libraries/maths.lib" },{ "library_path2": "/libraries/platform.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "maxmsp_lib_author": "GRAME" },{ "maxmsp_lib_copyright": "GRAME" },{ "maxmsp_lib_license": "LGPL with exception" },{ "maxmsp_lib_name": "MaxMSP compatibility Library" },{ "maxmsp_lib_version": "1.1.0" },{ "name": "HPF" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "HPF","items": [ {"type": "hslider","label": "Freq","shortname": "Freq","address": "/HPF/Freq","index": 0,"init": 1000,"min": 100,"max": 10000,"step": 1},{"type": "hslider","label": "Q","shortname": "Q","address": "/HPF/Q","index": 12,"init": 1,"min": 0.01,"max": 100,"step": 0.01}]}]}';
}
function getJSON5() {
    return '{"name": "reverbDesigner","filename": "reverbDesigner.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn reverbDesigner -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/C97B23925957E1036D420D167FDCE184C17A4500/web/wap"],"size": 1053004,"inputs": 4,"outputs": 2,"meta": [ { "analyzers_lib_name": "Faust Analyzer Library" },{ "analyzers_lib_version": "1.2.0" },{ "basics_lib_name": "Faust Basic Element Library" },{ "basics_lib_tabulateNd": "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>" },{ "basics_lib_version": "1.11.1" },{ "compile_options": "-lang wasm-ib -ct 1 -cn reverbDesigner -es 1 -mcd 16 -single -ftz 2" },{ "delays_lib_name": "Faust Delay Library" },{ "delays_lib_prime_power_delays_author": "Julius O. Smith III" },{ "delays_lib_version": "1.1.0" },{ "demos_lib_fdnrev0_demo_author": "Julius O. Smith III" },{ "demos_lib_fdnrev0_demo_licence": "MIT" },{ "demos_lib_name": "Faust Demos Library" },{ "demos_lib_stereo_reverb_tester_author": "Julius O. Smith III" },{ "demos_lib_stereo_reverb_tester_licence": "MIT" },{ "demos_lib_version": "1.1.0" },{ "filename": "reverbDesigner.dsp" },{ "filters_lib_filterbank_author": "Julius O. Smith III" },{ "filters_lib_filterbank_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_filterbank_license": "MIT-style STK-4.3 license" },{ "filters_lib_fir_author": "Julius O. Smith III" },{ "filters_lib_fir_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_fir_license": "MIT-style STK-4.3 license" },{ "filters_lib_highpass_author": "Julius O. Smith III" },{ "filters_lib_highpass_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_highpass_plus_lowpass_author": "Julius O. Smith III" },{ "filters_lib_highpass_plus_lowpass_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_highpass_plus_lowpass_license": "MIT-style STK-4.3 license" },{ "filters_lib_iir_author": "Julius O. Smith III" },{ "filters_lib_iir_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_iir_license": "MIT-style STK-4.3 license" },{ "filters_lib_lowpass0_highpass1": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_lowpass0_highpass1_author": "Julius O. Smith III" },{ "filters_lib_lowpass_author": "Julius O. Smith III" },{ "filters_lib_lowpass_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_lowpass_license": "MIT-style STK-4.3 license" },{ "filters_lib_name": "Faust Filters Library" },{ "filters_lib_tf1_author": "Julius O. Smith III" },{ "filters_lib_tf1_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_tf1_license": "MIT-style STK-4.3 license" },{ "filters_lib_tf1s_author": "Julius O. Smith III" },{ "filters_lib_tf1s_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_tf1s_license": "MIT-style STK-4.3 license" },{ "filters_lib_tf2_author": "Julius O. Smith III" },{ "filters_lib_tf2_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_tf2_license": "MIT-style STK-4.3 license" },{ "filters_lib_tf2s_author": "Julius O. Smith III" },{ "filters_lib_tf2s_copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_tf2s_license": "MIT-style STK-4.3 license" },{ "filters_lib_version": "1.3.0" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/demos.lib" },{ "library_path10": "/libraries/noises.lib" },{ "library_path2": "/libraries/reverbs.lib" },{ "library_path3": "/libraries/basics.lib" },{ "library_path4": "/libraries/delays.lib" },{ "library_path5": "/libraries/maths.lib" },{ "library_path6": "/libraries/platform.lib" },{ "library_path7": "/libraries/signals.lib" },{ "library_path8": "/libraries/filters.lib" },{ "library_path9": "/libraries/analyzers.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "reverbDesigner" },{ "noises_lib_name": "Faust Noise Generator Library" },{ "noises_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "reverbs_lib_name": "Faust Reverb Library" },{ "reverbs_lib_version": "1.2.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "1.5.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "reverbDesigner","items": [ {"type": "vgroup","label": "FEEDBACK DELAY NETWORK (FDN) REVERBERATOR, ORDER 16","meta": [{ "tooltip": "See Faust\'s reverbs.lib for documentation and references" }],"items": [ {"type": "vgroup","label": "Band Crossover Frequencies","meta": [{ "1": "" }],"items": [ {"type": "hslider","label": "Band 0 upper edge in Hz","shortname": "Band_0_upper_edge_in_Hz","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Crossover_Frequencies/Band_0_upper_edge_in_Hz","index": 4,"meta": [{ "0": "" },{ "scale": "log" },{ "tooltip": "Each delay-line signal is split into frequency-bands for separate     decay-time control in each band" },{ "unit": "Hz" }],"init": 500,"min": 100,"max": 10000,"step": 1},{"type": "hslider","label": "Band 1 upper edge in Hz","shortname": "Band_1_upper_edge_in_Hz","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Crossover_Frequencies/Band_1_upper_edge_in_Hz","index": 16,"meta": [{ "1": "" },{ "scale": "log" },{ "tooltip": "Each delay-line signal is split into frequency-bands for separate     decay-time control in each band" },{ "unit": "Hz" }],"init": 1000,"min": 100,"max": 10000,"step": 1},{"type": "hslider","label": "Band 2 upper edge in Hz","shortname": "Band_2_upper_edge_in_Hz","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Crossover_Frequencies/Band_2_upper_edge_in_Hz","index": 20,"meta": [{ "2": "" },{ "scale": "log" },{ "tooltip": "Each delay-line signal is split into frequency-bands for separate     decay-time control in each band" },{ "unit": "Hz" }],"init": 2000,"min": 100,"max": 10000,"step": 1},{"type": "hslider","label": "Band 3 upper edge in Hz","shortname": "Band_3_upper_edge_in_Hz","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Crossover_Frequencies/Band_3_upper_edge_in_Hz","index": 24,"meta": [{ "3": "" },{ "scale": "log" },{ "tooltip": "Each delay-line signal is split into frequency-bands for separate     decay-time control in each band" },{ "unit": "Hz" }],"init": 4000,"min": 100,"max": 10000,"step": 1}]},{"type": "hgroup","label": "Band Decay Times (T60)","meta": [{ "2": "" }],"items": [ {"type": "vslider","label": "0","shortname": "0","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Decay_Times__T60_/0","index": 132,"meta": [{ "0": "" },{ "scale": "log" },{ "tooltip": "T60 is the 60dB         decay-time in seconds. For concert halls, an overall reverberation time (T60) near         1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each         frequency band. In real rooms, higher frequency bands generally decay faster due         to absorption and scattering." },{ "unit": "s" }],"init": 8.4,"min": 0.1,"max": 100,"step": 0.1},{"type": "vslider","label": "1","shortname": "1","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Decay_Times__T60_/1","index": 168,"meta": [{ "1": "" },{ "scale": "log" },{ "tooltip": "T60 is the 60dB         decay-time in seconds. For concert halls, an overall reverberation time (T60) near         1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each         frequency band. In real rooms, higher frequency bands generally decay faster due         to absorption and scattering." },{ "unit": "s" }],"init": 6.5,"min": 0.1,"max": 100,"step": 0.1},{"type": "vslider","label": "2","shortname": "2","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Decay_Times__T60_/2","index": 204,"meta": [{ "2": "" },{ "scale": "log" },{ "tooltip": "T60 is the 60dB         decay-time in seconds. For concert halls, an overall reverberation time (T60) near         1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each         frequency band. In real rooms, higher frequency bands generally decay faster due         to absorption and scattering." },{ "unit": "s" }],"init": 5,"min": 0.1,"max": 100,"step": 0.1},{"type": "vslider","label": "3","shortname": "3","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Decay_Times__T60_/3","index": 252,"meta": [{ "3": "" },{ "scale": "log" },{ "tooltip": "T60 is the 60dB         decay-time in seconds. For concert halls, an overall reverberation time (T60) near         1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each         frequency band. In real rooms, higher frequency bands generally decay faster due         to absorption and scattering." },{ "unit": "s" }],"init": 3.8,"min": 0.1,"max": 100,"step": 0.1},{"type": "vslider","label": "4","shortname": "4","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Band_Decay_Times__T60_/4","index": 312,"meta": [{ "4": "" },{ "scale": "log" },{ "tooltip": "T60 is the 60dB         decay-time in seconds. For concert halls, an overall reverberation time (T60) near         1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each         frequency band. In real rooms, higher frequency bands generally decay faster due         to absorption and scattering." },{ "unit": "s" }],"init": 2.7,"min": 0.1,"max": 100,"step": 0.1}]},{"type": "vgroup","label": "Room Dimensions","meta": [{ "3": "" }],"items": [ {"type": "hslider","label": "min acoustic ray length","shortname": "min_acoustic_ray_length","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Room_Dimensions/min_acoustic_ray_length","index": 420,"meta": [{ "1": "" },{ "scale": "log" },{ "tooltip": "This length (in meters) determines the shortest delay-line used in the FDN     reverberator. Think of it as the shortest wall-to-wall separation in the room." },{ "unit": "m" }],"init": 46,"min": 0.1,"max": 63,"step": 0.1},{"type": "hslider","label": "max acoustic ray length","shortname": "max_acoustic_ray_length","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Room_Dimensions/max_acoustic_ray_length","index": 136,"meta": [{ "2": "" },{ "scale": "log" },{ "tooltip": "This length (in meters) determines the longest delay-line used in the         FDN reverberator. Think of it as the largest wall-to-wall separation in the room." },{ "unit": "m" }],"init": 63,"min": 0.1,"max": 63,"step": 0.1}]},{"type": "hgroup","label": "Input Controls","meta": [{ "4": "" }],"items": [ {"type": "vgroup","label": "Reverb State","meta": [{ "3": "" }],"items": [ {"type": "button","label": "Quench","shortname": "Quench","address": "/reverbDesigner/FEEDBACK_DELAY_NETWORK__FDN__REVERBERATOR__ORDER_16/Input_Controls/Reverb_State/Quench","index": 4160,"meta": [{ "1": "" },{ "tooltip": "Hold down \'Quench\' to clear the reverberator" }]}]}]}]},{"type": "vgroup","label": "Input Config","meta": [{ "1": "" }],"items": [ {"type": "checkbox","label": "Mute Ext Inputs","shortname": "Mute_Ext_Inputs","address": "/reverbDesigner/Input_Config/Mute_Ext_Inputs","index": 0,"meta": [{ "1": "" },{ "tooltip": "When this is checked, the stereo external audio inputs are         disabled (good for hearing the impulse response or pink-noise response alone)" }]},{"type": "checkbox","label": "Pink Noise","shortname": "Pink_Noise","address": "/reverbDesigner/Input_Config/Pink_Noise","index": 4212,"meta": [{ "2": "" },{ "tooltip": "Pink Noise (or 1/f noise) is Constant-Q Noise (useful for adjusting         the EQ sections)" }]}]},{"type": "hgroup","label": "Impulse Selection","meta": [{ "2": "" }],"items": [ {"type": "button","label": "Left","shortname": "Left","address": "/reverbDesigner/Impulse_Selection/Left","index": 4164,"meta": [{ "1": "" },{ "tooltip": "Send impulse into LEFT channel" }]},{"type": "button","label": "Center","shortname": "Center","address": "/reverbDesigner/Impulse_Selection/Center","index": 4176,"meta": [{ "2": "" },{ "tooltip": "Send impulse into LEFT and RIGHT channels" }]},{"type": "button","label": "Right","shortname": "Right","address": "/reverbDesigner/Impulse_Selection/Right","index": 69768,"meta": [{ "3": "" },{ "tooltip": "Send impulse into RIGHT channel" }]}]},{"type": "hslider","label": "Output Level (dB)","shortname": "Output_Level_dB","address": "/reverbDesigner/Output_Level__dB_","index": 1053000,"meta": [{ "3": "" },{ "tooltip": "Output scale factor" },{ "unit": "dB" }],"init": -40,"min": -70,"max": 20,"step": 0.1}]}]}';
}
function getJSON6() {
    return '{"name": "LPF","filename": "LPF.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn LPF -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/20872F32A0BCD2B2556FF36AA75F495CC92DE571/web/wap"],"size": 28,"inputs": 1,"outputs": 1,"meta": [ { "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "LPF.dsp" },{ "library_path0": "/libraries/maxmsp.lib" },{ "library_path1": "/libraries/maths.lib" },{ "library_path2": "/libraries/platform.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "maxmsp_lib_author": "GRAME" },{ "maxmsp_lib_copyright": "GRAME" },{ "maxmsp_lib_license": "LGPL with exception" },{ "maxmsp_lib_name": "MaxMSP compatibility Library" },{ "maxmsp_lib_version": "1.1.0" },{ "name": "LPF" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "LPF","items": [ {"type": "hslider","label": "Freq","shortname": "Freq","address": "/LPF/Freq","index": 0,"init": 1000,"min": 100,"max": 10000,"step": 1},{"type": "hslider","label": "Q","shortname": "Q","address": "/LPF/Q","index": 12,"init": 1,"min": 0.01,"max": 100,"step": 0.01}]}]}';
}
function getJSON7() {
    return '{"name": "diodeLadder","filename": "diodeLadder.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn diodeLadder -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/DCC69746C242E88D9D964D5BE87D70D1F805C82A/web/wap"],"size": 92,"inputs": 0,"outputs": 2,"meta": [ { "author": "Eric Tarr" },{ "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "description": "Demonstration of diodeLadder" },{ "filename": "diodeLadder.dsp" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/noises.lib" },{ "library_path2": "/libraries/oscillators.lib" },{ "library_path3": "/libraries/maths.lib" },{ "library_path4": "/libraries/platform.lib" },{ "library_path5": "/libraries/vaeffects.lib" },{ "library_path6": "/libraries/signals.lib" },{ "library_path7": "/libraries/misceffects.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "misceffects_lib_cubicnl_author": "Julius O. Smith III" },{ "misceffects_lib_cubicnl_license": "STK-4.3" },{ "misceffects_lib_name": "Misc Effects Library" },{ "misceffects_lib_version": "2.4.0" },{ "name": "diodeLadder" },{ "noises_lib_name": "Faust Noise Generator Library" },{ "noises_lib_version": "1.4.0" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_saw2ptr_author": "Julius O. Smith III" },{ "oscillators_lib_saw2ptr_license": "STK-4.3" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "1.5.0" },{ "vaeffects_lib_diodeLadder_author": "Eric Tarr" },{ "vaeffects_lib_diodeLadder_license": "MIT-style STK-4.3 license" },{ "vaeffects_lib_name": "Faust Virtual Analog Filter Effect Library" },{ "vaeffects_lib_version": "1.2.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "diodeLadder","items": [ {"type": "hslider","label": "Q","shortname": "Q","address": "/diodeLadder/Q","index": 28,"init": 1,"min": 0.7072,"max": 25,"step": 0.01},{"type": "checkbox","label": "Saw/Noise","shortname": "Noise","address": "/diodeLadder/Saw/Noise","index": 48},{"type": "hslider","label": "freq","shortname": "freq","address": "/diodeLadder/freq","index": 12,"init": 0.1,"min": 0,"max": 1,"step": 0.001}]}]}';
}
// Autopan modif avec 1 slider h
function getJSON8() {
    return '{"name": "autopan","filename": "autopan.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn autopan -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/AA18F69501D9C65538487D4EA8C13B4AE5C00C57/web/wap"],"size": 524384,"inputs": 2,"outputs": 2,"meta": [ { "basics_lib_name": "Faust Basic Element Library" },{ "basics_lib_tabulateNd": "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>" },{ "basics_lib_version": "1.11.1" },{ "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "autopan.dsp" },{ "interpolators_lib_interpolate_linear_author": "Stéphane Letz" },{ "interpolators_lib_interpolate_linear_licence": "MIT" },{ "interpolators_lib_name": "Faust Interpolator Library" },{ "interpolators_lib_remap_author": "David Braun" },{ "interpolators_lib_version": "1.3.0" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/signals.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "library_path4": "/libraries/oscillators.lib" },{ "library_path5": "/libraries/basics.lib" },{ "library_path6": "/libraries/interpolators.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "autopan" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "1.5.0" },{ "version": "2.69.3" }],"ui": [ {"type": "hgroup","label": "Auto Pan","items": [ {"type": "hslider","label": "Amount","shortname": "Amount","address": "/Auto_Pan/Amount","index": 524336,"meta": [{ "0": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.001},{"type": "hslider","label": "Rate","shortname": "Rate","address": "/Auto_Pan/Rate","index": 524296,"meta": [{ "1": "" },{ "scale": "log" },{ "unit": "Hz" }],"init": 1,"min": 0.05,"max": 90,"step": 0.001},{"type": "hslider","label": "Phase","shortname": "Phase","address": "/Auto_Pan/Phase","index": 524340,"meta": [{ "2": "" },{ "style": "knob" },{ "unit": "°" }],"init": 180,"min": 0,"max": 360,"step": 15},{"type": "hslider","label": "Shape","shortname": "Shape","address": "/Auto_Pan/Shape","index": 524324,"meta": [{ "3": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.001}]}]}';
}
// EXEMPLE CHECKBOX
function getJSON9() {
    return '{"name": "exfaust99","filename": "exfaust99.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn exfaust99 -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/91A3234FEA9DB49AA678260EBFCDF05F09E7033E/web/wap"],"size": 16,"inputs": 0,"outputs": 1,"meta": [ { "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "exfaust99.dsp" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/noises.lib" },{ "name": "exfaust99" },{ "noises_lib_name": "Faust Noise Generator Library" },{ "noises_lib_version": "1.4.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "exfaust99","items": [ {"type": "checkbox","label": "gate","shortname": "gate","address": "/exfaust99/gate","index": 8}]}]}';
}
// Autopan in VGroup
function getJSON10() {
    return '{"name": "autopan","filename": "autopan.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn autopan -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/AD41AC370BFD0B429F317FE06063FBEA95B75161/web/wap"],"size": 524384,"inputs": 2,"outputs": 2,"meta": [ { "basics_lib_name": "Faust Basic Element Library" },{ "basics_lib_tabulateNd": "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>" },{ "basics_lib_version": "1.11.1" },{ "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "autopan.dsp" },{ "interpolators_lib_interpolate_linear_author": "Stéphane Letz" },{ "interpolators_lib_interpolate_linear_licence": "MIT" },{ "interpolators_lib_name": "Faust Interpolator Library" },{ "interpolators_lib_remap_author": "David Braun" },{ "interpolators_lib_version": "1.3.0" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/signals.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "library_path4": "/libraries/oscillators.lib" },{ "library_path5": "/libraries/basics.lib" },{ "library_path6": "/libraries/interpolators.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "autopan" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "1.5.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "Auto Pan","items": [ {"type": "hslider","label": "Amount","shortname": "Amount","address": "/Auto_Pan/Amount","index": 524336,"meta": [{ "0": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.001},{"type": "hslider","label": "Rate","shortname": "Rate","address": "/Auto_Pan/Rate","index": 524296,"meta": [{ "1": "" },{ "scale": "log" },{ "unit": "Hz" }],"init": 1,"min": 0.05,"max": 90,"step": 0.001},{"type": "hslider","label": "Phase","shortname": "Phase","address": "/Auto_Pan/Phase","index": 524340,"meta": [{ "2": "" },{ "style": "knob" },{ "unit": "°" }],"init": 180,"min": 0,"max": 360,"step": 15},{"type": "hslider","label": "Shape","shortname": "Shape","address": "/Auto_Pan/Shape","index": 524324,"meta": [{ "3": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.001}]}]}';
}
function getJSON11() {
    return '{"name": "exfaust105","filename": "exfaust105.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn exfaust105 -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/0D1C3DEDF0FC523AC5D619F00FF275786F0E802C/web/wap"],"size": 28,"inputs": 0,"outputs": 1,"meta": [ { "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "exfaust105.dsp" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/oscillators.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "exfaust105" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_saw2ptr_author": "Julius O. Smith III" },{ "oscillators_lib_saw2ptr_license": "STK-4.3" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "version": "2.69.3" }],"ui": [ {"type": "hgroup","label": "MainGrp","items": [ {"type": "hgroup","label": "Oscillator","items": [ {"type": "hgroup","label": "group1","items": [ {"type": "hslider","label": "freq","shortname": "freq","address": "/MainGrp/Oscillator/group1/freq","index": 0,"meta": [{ "style": "knob" }],"init": 440,"min": 50,"max": 1000,"step": 0.1}]}]},{"type": "hgroup","label": "group2","items": [ {"type": "hslider","label": "gain","shortname": "gain","address": "/MainGrp/group2/gain","index": 24,"meta": [{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01}]}]}]}';
}
function getJSON12() {
    return '{"name": "group","filename": "group.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn group -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/D720C71159939FB57D37CD546A052CAC364A523D/web/wap"],"size": 32,"inputs": 0,"outputs": 1,"meta": [ { "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "group.dsp" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/oscillators.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "group" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_saw2ptr_author": "Julius O. Smith III" },{ "oscillators_lib_saw2ptr_license": "STK-4.3" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "group","items": [ {"type": "hgroup","label": "Oscillator","items": [ {"type": "hslider","label": "freq","shortname": "freq","address": "/group/Oscillator/freq","index": 0,"init": 440,"min": 50,"max": 1000,"step": 0.1},{"type": "hslider","label": "gain","shortname": "gain","address": "/group/Oscillator/gain","index": 24,"init": 0,"min": 0,"max": 1,"step": 0.01}]},{"type": "hgroup","label": "checkbox","items": [ {"type": "checkbox","label": "clique","shortname": "clique","address": "/group/checkbox/clique","index": 28}]}]}]}';
}
function getJSON() {
    return '{"name": "group","filename": "group.dsp","version": "2.69.9","compile_options": "-lang wasm-ib -ct 1 -cn group -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/467C9DCC1B686914E7B23029BB17499886B21C5E/web/wap"],"size": 44,"inputs": 0,"outputs": 1,"meta": [ { "compile_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "filename": "group.dsp" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/libraries/oscillators.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.7.0" },{ "name": "group" },{ "oscillators_lib_name": "Faust Oscillator Library" },{ "oscillators_lib_saw2ptr_author": "Julius O. Smith III" },{ "oscillators_lib_saw2ptr_license": "STK-4.3" },{ "oscillators_lib_version": "1.4.0" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "1.3.0" },{ "version": "2.69.3" }],"ui": [ {"type": "vgroup","label": "group","items": [ {"type": "hgroup","label": "Oscillator","items": [ {"type": "hslider","label": "freq","shortname": "freq","address": "/group/Oscillator/freq","index": 0,"meta": [{ "style": "knob" }],"init": 440,"min": 50,"max": 1000,"step": 0.1},{"type": "hslider","label": "gain","shortname": "gain","address": "/group/Oscillator/gain","index": 28,"meta": [{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01}]},{"type": "hgroup","label": "checkbox","items": [ {"type": "checkbox","label": "clique","shortname": "clique","address": "/group/checkbox/clique","index": 24}]},{"type": "hgroup","label": "module","items": [ {"type": "hgroup","label": "module","items": [ {"type": "hslider","label": "offset","shortname": "module_offset","address": "/group/module/module/offset","index": 40,"meta": [{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01}]},{"type": "hslider","label": "offset2","shortname": "offset2","address": "/group/module/offset2","index": 36,"meta": [{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "hgroup","label": "test1","items": [ {"type": "hslider","label": "offset","shortname": "test1_offset","address": "/group/module/test1/offset","index": 32,"meta": [{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01}]}]}]}]}';
}
const factory = Factory.getInstance()

export let groups = {hgroupCount: 0, vgroupCount: 0};


/**
 * Parses JSON data and creates components based on the provided JSON structure.
 * @returns The last created component.
 */
export function parser() {
    const jsonString = getJSON();
    const jsonObj = JSON.parse(jsonString).ui;
    countGroupTypes(jsonObj);
    console.log(jsonObj);
    let lastComponent: any = null;
    /**
     * Recursively creates components from the provided JSON object.
     * @param obj - The JSON object to create components from.
     * @returns The created component or null if no component is created.
     */
     function createComponentsFromJSON(obj: any) {
        if (obj.type) {
            let currStyle = null;

            /**
             * Retrieves the style from the meta field.
             * @param obj - The JSON object.
             */
            const getStyle = (obj: any) => {
                if (obj.meta) {
                    obj.meta.forEach((meta: any) => {
                        if (meta.style) {
                            currStyle = meta.style;
                        }
                    });
                } else {
                    currStyle = null;
                }
            }

            getStyle(obj);

            const component = factory.createComponent(obj.type, obj.label, {
                init: obj.init,
                min: obj.min,
                max: obj.max,
                step: obj.step,
                style: currStyle || null
            });

            if (obj.items) {
                obj.items.forEach((item: any) => {
                    const childComponent = createComponentsFromJSON(item);
                    if (childComponent) {
                        if (component instanceof HGroup || component instanceof VGroup) {
                            component.addComponent(childComponent);
                        }
                    }
                });
            }

            lastComponent = component;
            return component;
        }
        return null;
    }

    jsonObj.forEach((obj: any) => {
        createComponentsFromJSON(obj);
    });

    console.log(lastComponent);
    return lastComponent;
}

/**
 * Counts the number of hgroup and vgroup types in the provided JSON data.
 * @param jsonData - The JSON data to be parsed.
 * @returns Nothing, but sets the global groups variable
 */
function countGroupTypes(jsonData: any) {
    let hgroupCount = 0;
    let vgroupCount = 0;

    function countGroups(group: any) {
        if (group.type === 'hgroup') {
            hgroupCount++;
        } else if (group.type === 'vgroup') {
            vgroupCount++;
        }

        if (group.items && Array.isArray(group.items)) {
            group.items.forEach((item: any) => countGroups(item));
        }
    }

    if (jsonData && Array.isArray(jsonData)) {
        jsonData.forEach((group: any) => countGroups(group));
    }

    groups = {hgroupCount, vgroupCount};
    console.log(groups)
}
